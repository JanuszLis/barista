load("//tools/bazel_rules:index.bzl", "ng_module")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@npm//@bazel/typescript:index.bzl", "ts_devserver")
load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@npm//@babel/cli:index.bzl", "babel")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")


load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@npm//history-server:index.bzl", "history_server")

package(default_visibility = ["//apps/components-e2e:__subpackages__"])

# Root paths that are used to serve files from for the pkg_web and the
# ts_devserver files from this roots can be requested via /...
_rootPaths = [
    "npm/node_modules",
    "npm/node_modules/@dynatrace/barista-fonts",
]

sass_binary(
    name = "styles",
    src = "main.scss",
    include_paths = ["external/npm/node_modules"],
    output_name = "styles.css",
    deps = ["//libs/barista-components/style"],
)

ng_module(
    name = "src",
    srcs = [
        "main.dev.ts",
        "main.prod.ts",
    ],
    tsconfig = "//apps/components-e2e:tsconfig-app",
    deps = [
        "//apps/components-e2e/src/app",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
    ],
)

ts_devserver(
    name = "devserver",
    additional_root_paths = _rootPaths,
    entry_module = "dynatrace/apps/components-e2e/src/main.dev",
    port = 4200,
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        "//tools/bazel_rules/dev_server:rxjs_umd_modules",
    ],
    serving_path = "/bundle.js",
    static_files = [
        ":index.html",
        ":styles.css",
        "@npm//:node_modules/zone.js/dist/zone.min.js",
    ],
    deps = [
        ":src",
        "@npm//@dynatrace/barista-fonts",
        "@npm//@dynatrace/barista-icons",
    ],
)


load("//tools/bazel_rules/ng_application:ng_application_macro.bzl", "ng_application_macro")


ng_application_macro(
    name = "bundle",
    entry_point = "main.prod.ts",
    index_html = ":index.html",
    deps = [":src"],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "//apps/components-e2e:rollup.config.js",
    entry_points = {
        "main.prod.ts": "index"
    },
    sourcemap = "false",
    output_dir = True,
    deps = [":src"],
)

babel(
    name = "bundle-es5",
    args = [
        "$(execpath :bundle-es2015)",
        "--no-babelrc",
        "--source-maps",
        "--presets=@babel/preset-env",
        "--out-dir",
        "$(@D)",
    ],
    data = [
        ":bundle-es2015",
        "@npm//@babel/preset-env",
    ],
    output_dir = True,
)


terser_minified(
    name = "bundle-es2015.min",
    src = ":bundle-es2015",
    sourcemap = False,
)

terser_minified(
    name = "bundle-es5.min",
    src = ":bundle-es5",
    sourcemap = False,
)

_ASSETS = [
    ":styles.css",
    "@npm//:node_modules/zone.js/dist/zone.min.js",
    ":bundle-es2015.min",
]

html_insert_assets(
    name = "inject_scripts_for_prod",
#     # we can't output "src/example/index.html" since that collides with the devmode file.
#     # pkg_web rule will re-root paths that start with _{name} by default
#     # so we output "_prodapp/src/example/index.html" so that it is mapped to
#     # `example/index.html` in the web package.
    outs = ["_prodapp/index.html"],
    args = [
        "--html=$(execpath :index.prod.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS],
    data =  _ASSETS + [
        ":index.prod.html",
    ],
)

pkg_web(
    name = "prodapp",
    srcs = [
        ":bundle",
        ":index.html"
    ],
    additional_root_paths = _rootPaths
)

history_server(
    name = "prodserver",
    data = [":prodapp"],
    # '-a src/prodapp' will ask history-server to scan for all apps under the
    # given folder this will result in the following auto-configuration:
    #   /example => src/prodapp/example
    #   /        => src/prodapp
    templated_args = [
        "-a",
        "$(rootpath :prodapp)",
    ],
)


# "//apps/components-e2e/src/components/icon",
# "//apps/components-e2e/src/components/button",
# "//apps/components-e2e/src/components/button-group",
# rollup_bundle(
#     name = "bundle-es2015",
#     config_file = "rollup.config.js",
#     entry_points = {
#         ":main.prod.ts": "index",
#     },
#     output_dir = True,
#     tags = ["prod-showcase"],
#     deps = [
#         "//src/showcase",
#         "@npm//@rollup/plugin-alias",
#         "@npm//rollup-plugin-commonjs",
#         "@npm//rollup-plugin-node-resolve",
#     ],
# )
