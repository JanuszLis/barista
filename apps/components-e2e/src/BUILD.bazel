load("@npm//@bazel/typescript:index.bzl", "ts_config")
load("//tools/bazel_rules:index.bzl", "ng_module")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@npm//@bazel/typescript:index.bzl", "ts_config", "ts_devserver", "ts_library")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")

package(default_visibility = ["//apps/components-e2e:__subpackages__"])

_ASSETS = [
    ":main.css",
    #   {
    #     "glob": "**",
    #     "input": "libs/barista-components/assets",
    #     "output": "/assets"
    #   },
    #   {
    #     "glob": "**",
    #     "input": "apps/components-e2e/src/fixtures",
    #     "output": "/fixtures"
    #   },
    #   {
    #     "glob": "*.svg",
    #     "input": "node_modules/@dynatrace/barista-icons",
    #     "output": "/assets/icons"
    #   },
    #   {
    #     "glob": "**/*",
    #     "input": "node_modules/@dynatrace/barista-fonts/fonts/",
    #     "output": "/fonts"
    #   }
]


sass_binary(
    name = "styles",
    src = "main.scss",
)

ng_module(
    name = "compile",
    srcs = ["main.ts"],
    tsconfig = "//apps/components-e2e:tsconfig-app",
    deps = [
        "//apps/components-e2e/src/app",
        "@npm//@angular/platform-browser-dynamic",
    ],
)

# # This scales really well for massive codebases.
# ts_devserver(
#     name = "devserver",
#     # Serve src/example/index.html at /index.html
#     # additional_root_paths = ["src/example"],
#     # Run the program from the development version of the main
#     entry_module = "main",
#     port = 4200,
#     # These scripts will be included in the JS bundle after require.js
#     # They should have only named UMD modules, or require.js will throw.
#     scripts = [
#         "@npm//:node_modules/tslib/tslib.js",
#         # ":rxjs_umd_modules",
#         # We are manaully adding the bazel generated named-UMD date-fns bundle here as
#         # named-UMD bundles for non-APF npm packages are not yet automatically added.
#         # This file is generated by the npm_umd_bundle @npm//date-fns:date-fns__umd
#         # rule that is setup by yarn_install.
#         # "@npm//date-fns:date-fns.umd.js",
#     ],
#     # Serve these files in addition to the JavaScript bundle
#     static_files = _ASSETS + [
#         ":inject_scripts_for_dev",
#         # "//src/assets",
#     ],
#     deps = [":compile"],
# )

my_macro(
    name = "devserver"
)


def my_macro(name):

    html_insert_assets(
        name,
        outs = ["index.dev.html"],
        args = [
            "--html=$(execpath //apps/components-e2e/src:index.html)",
            "--out=$@",
            "--roots=. $(RULEDIR)",
            "--assets",
        ] + ["$(execpath %s)" % s for s in _ASSETS] + [
            # This file doesn't exist during the build, but will be served by ts_devserver
            "./_/ts_scripts.js",
        ],
        data = ["//apps/components-e2e/src:index.html"] + _ASSETS,
    )
